edge_attr (torch.Size([24000, 10])): tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]])
SLURM ID: 0
Start Pre-Training
No pre-trained checkpoint found.

TRAIN.PY
i_batch: 0
train_be (24000): tensor([0, 0, 0,  ..., 0, 0, 0], device='cuda:0')
train_bs (2000): tensor([0, 0, 0,  ..., 0, 0, 0], device='cuda:0')
train_bt (12): tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')


EDGE MODEL FORWARD
src (torch.Size([24000])): tensor([   0,    0,    0,  ..., 1999, 1999, 1999], device='cuda:0')
tgt (torch.Size([24000])): tensor([0, 1, 2,  ..., 7, 8, 9], device='cuda:0')
x_s (torch.Size([2000, 10])): tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
x_t (torch.Size([12, 2])): tensor([[0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.]], device='cuda:0')
edge_attr (torch.Size([24000, 10])): tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
u (torch.Size([1, 10])): tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], device='cuda:0')
h (torch.Size([24000, 32]))
x_s[src] (torch.Size([24000, 10]))
x_t[tgt] (torch.Size([24000, 2]))
edge_attr (torch.Size([24000, 10]))
u[batch_e] torch.Size([24000, 10])

EDGE MODEL FORWARD
src (torch.Size([24000])): tensor([   0,    0,    0,  ..., 1999, 1999, 1999], device='cuda:0')
tgt (torch.Size([24000])): tensor([0, 1, 2,  ..., 7, 8, 9], device='cuda:0')
x_s (torch.Size([2000, 10])): tensor([[-5.8902e-06,  1.8849e-04, -1.1780e-05,  ...,  3.7697e-05,
          4.7122e-06,  9.4243e-06],
        [-5.8902e-06,  1.8849e-04, -1.1780e-05,  ...,  3.7697e-05,
          4.7122e-06,  9.4243e-06],
        [-5.8902e-06,  1.8849e-04, -1.1780e-05,  ...,  3.7697e-05,
          4.7122e-06,  9.4243e-06],
        ...,
        [-5.8902e-06,  1.8849e-04, -1.1780e-05,  ...,  3.7697e-05,
          4.7122e-06,  9.4243e-06],
        [-5.8902e-06,  1.8849e-04, -1.1780e-05,  ...,  3.7697e-05,
          4.7122e-06,  9.4243e-06],
        [-5.8902e-06,  1.8849e-04, -1.1780e-05,  ...,  3.7697e-05,
          4.7122e-06,  9.4243e-06]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
x_t (torch.Size([12, 2])): tensor([[9.4243e-06, 7.5395e-05],
        [9.4243e-06, 7.5395e-05],
        [9.4243e-06, 7.5395e-05],
        [9.4243e-06, 7.5395e-05],
        [9.4243e-06, 7.5395e-05],
        [9.4243e-06, 7.5395e-05],
        [9.4243e-06, 7.5395e-05],
        [9.4243e-06, 7.5395e-05],
        [9.4243e-06, 7.5395e-05],
        [9.4243e-06, 7.5395e-05],
        [9.4243e-06, 7.5395e-05],
        [9.4243e-06, 7.5395e-05]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
edge_attr (torch.Size([24000, 10])): tensor([[ 0.0000e+00, -4.7122e-06,  4.7122e-06,  ...,  0.0000e+00,
         -9.4243e-06,  4.7122e-06],
        [ 0.0000e+00, -4.7122e-06,  4.7122e-06,  ...,  0.0000e+00,
         -9.4243e-06,  4.7122e-06],
        [ 0.0000e+00, -4.7122e-06,  4.7122e-06,  ...,  0.0000e+00,
         -9.4243e-06,  4.7122e-06],
        ...,
        [ 0.0000e+00, -4.7122e-06,  4.7122e-06,  ...,  0.0000e+00,
         -9.4243e-06,  4.7122e-06],
        [ 0.0000e+00, -4.7122e-06,  4.7122e-06,  ...,  0.0000e+00,
         -9.4243e-06,  4.7122e-06],
        [ 0.0000e+00, -4.7122e-06,  4.7122e-06,  ...,  0.0000e+00,
         -9.4243e-06,  4.7122e-06]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
u (torch.Size([1, 10])): tensor([[ 0.2291,  0.2667, -0.4540, -0.0820,  0.1681,  0.0574,  0.0641,  0.1806,
          0.0801, -0.3162]], device='cuda:0', grad_fn=<AddmmBackward0>)
h (torch.Size([24000, 32]))
x_s[src] (torch.Size([24000, 10]))
x_t[tgt] (torch.Size([24000, 2]))
edge_attr (torch.Size([24000, 10]))
u[batch_e] torch.Size([24000, 10])

EDGE MODEL FORWARD
src (torch.Size([24000])): tensor([   0,    0,    0,  ..., 1999, 1999, 1999], device='cuda:0')
tgt (torch.Size([24000])): tensor([0, 1, 2,  ..., 7, 8, 9], device='cuda:0')
x_s (torch.Size([2000, 10])): tensor([[ 4.7122e-06,  2.3561e-05,  9.4243e-05,  ..., -2.3561e-05,
          1.1780e-05,  1.8849e-05],
        [ 4.7122e-06,  2.3561e-05,  9.4243e-05,  ..., -2.3561e-05,
          1.1780e-05,  1.8849e-05],
        [ 4.7122e-06,  2.3561e-05,  9.4243e-05,  ..., -2.3561e-05,
          1.1780e-05,  1.8849e-05],
        ...,
        [ 4.7122e-06,  2.3561e-05,  9.4243e-05,  ..., -2.3561e-05,
          1.1780e-05,  1.8849e-05],
        [ 4.7122e-06,  2.3561e-05,  9.4243e-05,  ..., -2.3561e-05,
          1.1780e-05,  1.8849e-05],
        [ 4.7122e-06,  2.3561e-05,  9.4243e-05,  ..., -2.3561e-05,
          1.1780e-05,  1.8849e-05]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
x_t (torch.Size([12, 2])): tensor([[0.0000, 0.0006],
        [0.0000, 0.0006],
        [0.0000, 0.0006],
        [0.0000, 0.0006],
        [0.0000, 0.0006],
        [0.0000, 0.0006],
        [0.0000, 0.0006],
        [0.0000, 0.0006],
        [0.0000, 0.0006],
        [0.0000, 0.0006],
        [0.0000, 0.0006],
        [0.0000, 0.0006]], device='cuda:0', grad_fn=<NativeBatchNormBackward0>)
edge_attr (torch.Size([24000, 10])): tensor([[ 0.0000e+00,  0.0000e+00,  4.7122e-06,  ..., -4.7122e-06,
          1.8849e-05,  5.8902e-07],
        [ 0.0000e+00,  0.0000e+00,  4.7122e-06,  ..., -4.7122e-06,
          1.8849e-05,  5.8902e-07],
        [ 0.0000e+00,  0.0000e+00,  4.7122e-06,  ..., -4.7122e-06,
          1.8849e-05,  5.8902e-07],
        ...,
        [ 0.0000e+00,  0.0000e+00,  4.7122e-06,  ..., -4.7122e-06,
          1.8849e-05,  5.8902e-07],
        [ 0.0000e+00,  0.0000e+00,  4.7122e-06,  ..., -4.7122e-06,
          1.8849e-05,  5.8902e-07],
        [ 0.0000e+00,  0.0000e+00,  4.7122e-06,  ..., -4.7122e-06,
          1.8849e-05,  5.8902e-07]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
u (torch.Size([1, 10])): tensor([[-1.7773, -4.8608,  1.0916, -0.3383, -1.9622,  1.1886,  3.0404,  4.5039,
         -0.8249, -4.7104]], device='cuda:0', grad_fn=<AddmmBackward0>)
h (torch.Size([24000, 32]))
x_s[src] (torch.Size([24000, 10]))
x_t[tgt] (torch.Size([24000, 2]))
edge_attr (torch.Size([24000, 10]))
u[batch_e] torch.Size([24000, 10])

EDGE MODEL FORWARD
src (torch.Size([24000])): tensor([   0,    0,    0,  ..., 1999, 1999, 1999], device='cuda:0')
tgt (torch.Size([24000])): tensor([0, 1, 2,  ..., 7, 8, 9], device='cuda:0')
x_s (torch.Size([2000, 10])): tensor([[ 2.8273e-05, -9.4243e-06, -9.4243e-05,  ..., -1.1780e-06,
          3.7697e-05, -3.7697e-05],
        [ 2.8273e-05, -9.4243e-06, -9.4243e-05,  ..., -1.1780e-06,
          3.7697e-05, -3.7697e-05],
        [ 2.8273e-05, -9.4243e-06, -9.4243e-05,  ..., -1.1780e-06,
          3.7697e-05, -3.7697e-05],
        ...,
        [ 2.8273e-05, -9.4243e-06, -9.4243e-05,  ..., -1.1780e-06,
          3.7697e-05, -3.7697e-05],
        [ 2.8273e-05, -9.4243e-06, -9.4243e-05,  ..., -1.1780e-06,
          3.7697e-05, -3.7697e-05],
        [ 2.8273e-05, -9.4243e-06, -9.4243e-05,  ..., -1.1780e-06,
          3.7697e-05, -3.7697e-05]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
x_t (torch.Size([12, 2])): tensor([[0.0002, 0.0000],
        [0.0002, 0.0000],
        [0.0002, 0.0000],
        [0.0002, 0.0000],
        [0.0002, 0.0000],
        [0.0002, 0.0000],
        [0.0002, 0.0000],
        [0.0002, 0.0000],
        [0.0002, 0.0000],
        [0.0002, 0.0000],
        [0.0002, 0.0000],
        [0.0002, 0.0000]], device='cuda:0', grad_fn=<NativeBatchNormBackward0>)
edge_attr (torch.Size([24000, 10])): tensor([[ 4.7122e-06,  0.0000e+00, -9.4243e-06,  ...,  5.8902e-07,
          0.0000e+00,  0.0000e+00],
        [ 4.7122e-06,  0.0000e+00, -9.4243e-06,  ...,  5.8902e-07,
          0.0000e+00,  0.0000e+00],
        [ 4.7122e-06,  0.0000e+00, -9.4243e-06,  ...,  5.8902e-07,
          0.0000e+00,  0.0000e+00],
        ...,
        [ 4.7122e-06,  0.0000e+00, -9.4243e-06,  ...,  5.8902e-07,
          0.0000e+00,  0.0000e+00],
        [ 4.7122e-06,  0.0000e+00, -9.4243e-06,  ...,  5.8902e-07,
          0.0000e+00,  0.0000e+00],
        [ 4.7122e-06,  0.0000e+00, -9.4243e-06,  ...,  5.8902e-07,
          0.0000e+00,  0.0000e+00]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
u (torch.Size([1, 10])): tensor([[-0.5728,  0.1868,  1.3629,  1.2002,  0.2852,  0.8731,  0.2268, -0.5594,
          0.6236, -1.1473]], device='cuda:0', grad_fn=<AddmmBackward0>)
h (torch.Size([24000, 32]))
x_s[src] (torch.Size([24000, 10]))
x_t[tgt] (torch.Size([24000, 2]))
edge_attr (torch.Size([24000, 10]))
u[batch_e] torch.Size([24000, 10])
Traceback (most recent call last):
  File "/home/jl5824/pfs-neural-net/train.py", line 218, in <module>
    loss, gu, nu, ot, ut = Loss(time_pred, graph, penalty=penalty_pre, batchsize=batchsize)
    ^^^^^^^^^^^^^^^^^^^^
ValueError: not enough values to unpack (expected 5, got 4)

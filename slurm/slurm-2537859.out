edge_attr ({edge_attr.shape}): tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]])
SLURM ID: 0
Start Pre-Training
No pre-trained checkpoint found.

TRAIN.PY
i_batch: 0
train_be (24000): tensor([0, 0, 0,  ..., 0, 0, 0], device='cuda:0')
train_bs (2000): tensor([0, 0, 0,  ..., 0, 0, 0], device='cuda:0')
train_bt (12): tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')


EDGE MODEL FORWARD
src (torch.Size([24000])): tensor([   0,    0,    0,  ..., 1999, 1999, 1999], device='cuda:0')
tgt (torch.Size([24000])): tensor([0, 1, 2,  ..., 7, 8, 9], device='cuda:0')
x_s (torch.Size([2000, 10])): tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
x_t (torch.Size([12, 5])): tensor([[0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.]], device='cuda:0')
edge_attr (torch.Size([24000, 10])): tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
u (torch.Size([1, 10])): tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], device='cuda:0')

EDGE MODEL FORWARD
src (torch.Size([24000])): tensor([   0,    0,    0,  ..., 1999, 1999, 1999], device='cuda:0')
tgt (torch.Size([24000])): tensor([0, 1, 2,  ..., 7, 8, 9], device='cuda:0')
x_s (torch.Size([2000, 10])): tensor([[-1.8849e-05,  1.8849e-05,  4.7122e-05,  ..., -4.7122e-05,
          4.7122e-05,  5.6546e-05],
        [-1.8849e-05,  1.8849e-05,  4.7122e-05,  ..., -4.7122e-05,
          4.7122e-05,  5.6546e-05],
        [-1.8849e-05,  1.8849e-05,  4.7122e-05,  ..., -4.7122e-05,
          4.7122e-05,  5.6546e-05],
        ...,
        [-1.8849e-05,  1.8849e-05,  4.7122e-05,  ..., -4.7122e-05,
          4.7122e-05,  5.6546e-05],
        [-1.8849e-05,  1.8849e-05,  4.7122e-05,  ..., -4.7122e-05,
          4.7122e-05,  5.6546e-05],
        [-1.8849e-05,  1.8849e-05,  4.7122e-05,  ..., -4.7122e-05,
          4.7122e-05,  5.6546e-05]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
x_t (torch.Size([12, 5])): tensor([[-6.0316e-04,  0.0000e+00,  3.7697e-05, -1.2063e-03, -1.2063e-03],
        [-6.0316e-04,  0.0000e+00,  3.7697e-05, -1.2063e-03, -1.2063e-03],
        [-6.0316e-04,  0.0000e+00,  3.7697e-05, -1.2063e-03, -1.2063e-03],
        [-6.0316e-04,  0.0000e+00,  3.7697e-05, -1.2063e-03, -1.2063e-03],
        [-6.0316e-04,  0.0000e+00,  3.7697e-05, -1.2063e-03, -1.2063e-03],
        [-6.0316e-04,  0.0000e+00,  3.7697e-05, -1.2063e-03, -1.2063e-03],
        [-6.0316e-04,  0.0000e+00,  3.7697e-05, -1.2063e-03, -1.2063e-03],
        [-6.0316e-04,  0.0000e+00,  3.7697e-05, -1.2063e-03, -1.2063e-03],
        [-6.0316e-04,  0.0000e+00,  3.7697e-05, -1.2063e-03, -1.2063e-03],
        [-6.0316e-04,  0.0000e+00,  3.7697e-05, -1.2063e-03, -1.2063e-03],
        [-6.0316e-04,  0.0000e+00,  3.7697e-05, -1.2063e-03, -1.2063e-03],
        [-6.0316e-04,  0.0000e+00,  3.7697e-05, -1.2063e-03, -1.2063e-03]],
       device='cuda:0', grad_fn=<NativeBatchNormBackward0>)
edge_attr (torch.Size([24000, 10])): tensor([[ 9.4243e-06,  0.0000e+00, -4.7122e-06,  ...,  0.0000e+00,
          1.8849e-05,  4.7122e-06],
        [ 9.4243e-06,  0.0000e+00, -4.7122e-06,  ...,  0.0000e+00,
          1.8849e-05,  4.7122e-06],
        [ 9.4243e-06,  0.0000e+00, -4.7122e-06,  ...,  0.0000e+00,
          1.8849e-05,  4.7122e-06],
        ...,
        [ 9.4243e-06,  0.0000e+00, -4.7122e-06,  ...,  0.0000e+00,
          1.8849e-05,  4.7122e-06],
        [ 9.4243e-06,  0.0000e+00, -4.7122e-06,  ...,  0.0000e+00,
          1.8849e-05,  4.7122e-06],
        [ 9.4243e-06,  0.0000e+00, -4.7122e-06,  ...,  0.0000e+00,
          1.8849e-05,  4.7122e-06]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
u (torch.Size([1, 10])): tensor([[-2.1315,  1.4489, -1.5433,  0.9570, -3.2615, -0.5928,  2.7417, -2.8363,
         -0.7892,  1.6776]], device='cuda:0', grad_fn=<AddmmBackward0>)

EDGE MODEL FORWARD
src (torch.Size([24000])): tensor([   0,    0,    0,  ..., 1999, 1999, 1999], device='cuda:0')
tgt (torch.Size([24000])): tensor([0, 1, 2,  ..., 7, 8, 9], device='cuda:0')
x_s (torch.Size([2000, 10])): tensor([[ 9.4243e-05,  0.0000e+00, -5.6546e-05,  ...,  0.0000e+00,
         -9.4243e-05, -2.9451e-06],
        [ 9.4243e-05,  0.0000e+00, -5.6546e-05,  ...,  0.0000e+00,
         -9.4243e-05, -2.9451e-06],
        [ 9.4243e-05,  0.0000e+00, -5.6546e-05,  ...,  0.0000e+00,
         -9.4243e-05, -2.9451e-06],
        ...,
        [ 9.4243e-05,  0.0000e+00, -5.6546e-05,  ...,  0.0000e+00,
         -9.4243e-05, -2.9451e-06],
        [ 9.4243e-05,  0.0000e+00, -5.6546e-05,  ...,  0.0000e+00,
         -9.4243e-05, -2.9451e-06],
        [ 9.4243e-05,  0.0000e+00, -5.6546e-05,  ...,  0.0000e+00,
         -9.4243e-05, -2.9451e-06]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
x_t (torch.Size([12, 5])): tensor([[ 0.0000,  0.0000,  0.0024, -0.0012,  0.0000],
        [ 0.0000,  0.0000,  0.0024, -0.0012,  0.0000],
        [ 0.0000,  0.0000,  0.0024, -0.0012,  0.0000],
        [ 0.0000,  0.0000,  0.0024, -0.0012,  0.0000],
        [ 0.0000,  0.0000,  0.0024, -0.0012,  0.0000],
        [ 0.0000,  0.0000,  0.0024, -0.0012,  0.0000],
        [ 0.0000,  0.0000,  0.0024, -0.0012,  0.0000],
        [ 0.0000,  0.0000,  0.0024, -0.0012,  0.0000],
        [ 0.0000,  0.0000,  0.0024, -0.0012,  0.0000],
        [ 0.0000,  0.0000,  0.0024, -0.0012,  0.0000],
        [ 0.0000,  0.0000,  0.0024, -0.0012,  0.0000],
        [ 0.0000,  0.0000,  0.0024, -0.0012,  0.0000]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
edge_attr (torch.Size([24000, 10])): tensor([[ 2.3561e-06, -9.4243e-06,  1.8849e-05,  ...,  9.4243e-06,
          2.3561e-06,  0.0000e+00],
        [ 2.3561e-06, -9.4243e-06,  1.8849e-05,  ...,  9.4243e-06,
          2.3561e-06,  0.0000e+00],
        [ 2.3561e-06, -9.4243e-06,  1.8849e-05,  ...,  9.4243e-06,
          2.3561e-06,  0.0000e+00],
        ...,
        [ 2.3561e-06, -9.4243e-06,  1.8849e-05,  ...,  9.4243e-06,
          2.3561e-06,  0.0000e+00],
        [ 2.3561e-06, -9.4243e-06,  1.8849e-05,  ...,  9.4243e-06,
          2.3561e-06,  0.0000e+00],
        [ 2.3561e-06, -9.4243e-06,  1.8849e-05,  ...,  9.4243e-06,
          2.3561e-06,  0.0000e+00]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
u (torch.Size([1, 10])): tensor([[ -5.9262,  -1.8023,   2.7173,  -7.5971,   1.1274,  20.9147, -15.0810,
           8.9715,  -2.6196,   3.2769]], device='cuda:0',
       grad_fn=<AddmmBackward0>)

EDGE MODEL FORWARD
src (torch.Size([24000])): tensor([   0,    0,    0,  ..., 1999, 1999, 1999], device='cuda:0')
tgt (torch.Size([24000])): tensor([0, 1, 2,  ..., 7, 8, 9], device='cuda:0')
x_s (torch.Size([2000, 10])): tensor([[-2.3561e-06, -2.3561e-05, -1.8849e-04,  ...,  7.5395e-05,
          0.0000e+00,  1.1780e-05],
        [-2.3561e-06, -2.3561e-05, -1.8849e-04,  ...,  7.5395e-05,
          0.0000e+00,  1.1780e-05],
        [-2.3561e-06, -2.3561e-05, -1.8849e-04,  ...,  7.5395e-05,
          0.0000e+00,  1.1780e-05],
        ...,
        [-2.3561e-06, -2.3561e-05, -1.8849e-04,  ...,  7.5395e-05,
          0.0000e+00,  1.1780e-05],
        [-2.3561e-06, -2.3561e-05, -1.8849e-04,  ...,  7.5395e-05,
          0.0000e+00,  1.1780e-05],
        [-2.3561e-06, -2.3561e-05, -1.8849e-04,  ...,  7.5395e-05,
          0.0000e+00,  1.1780e-05]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
x_t (torch.Size([12, 5])): tensor([[ 0.0024, -0.0048,  0.0097,  0.0000,  0.0024],
        [ 0.0024, -0.0048,  0.0097,  0.0000,  0.0024],
        [ 0.0024, -0.0048,  0.0097,  0.0000,  0.0024],
        [ 0.0024, -0.0048,  0.0097,  0.0000,  0.0024],
        [ 0.0024, -0.0048,  0.0097,  0.0000,  0.0024],
        [ 0.0024, -0.0048,  0.0097,  0.0000,  0.0024],
        [ 0.0024, -0.0048,  0.0097,  0.0000,  0.0024],
        [ 0.0024, -0.0048,  0.0097,  0.0000,  0.0024],
        [ 0.0024, -0.0048,  0.0097,  0.0000,  0.0024],
        [ 0.0024, -0.0048,  0.0097,  0.0000,  0.0024],
        [ 0.0024, -0.0048,  0.0097,  0.0000,  0.0024],
        [ 0.0024, -0.0048,  0.0097,  0.0000,  0.0024]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
edge_attr (torch.Size([24000, 10])): tensor([[-1.8849e-05, -9.4243e-06,  0.0000e+00,  ...,  0.0000e+00,
          4.7122e-06,  0.0000e+00],
        [-1.8849e-05, -9.4243e-06,  0.0000e+00,  ...,  0.0000e+00,
          4.7122e-06,  0.0000e+00],
        [-1.8849e-05, -9.4243e-06,  0.0000e+00,  ...,  0.0000e+00,
          4.7122e-06,  0.0000e+00],
        ...,
        [-1.8849e-05, -9.4243e-06,  0.0000e+00,  ...,  0.0000e+00,
          4.7122e-06,  0.0000e+00],
        [-1.8849e-05, -9.4243e-06,  0.0000e+00,  ...,  0.0000e+00,
          4.7122e-06,  0.0000e+00],
        [-1.8849e-05, -9.4243e-06,  0.0000e+00,  ...,  0.0000e+00,
          4.7122e-06,  0.0000e+00]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
u (torch.Size([1, 10])): tensor([[ 15.9154,   5.2302,  -2.7928,   5.5677,  -2.3429,  20.6112,   1.9082,
           1.5403, -17.5787,  10.1042]], device='cuda:0',
       grad_fn=<AddmmBackward0>)
Batch 0: -U=-64805.5, G=0.0, N=0.0, +OT=36001.5, +UT=0.0

TRAIN.PY
i_batch: 1
train_be (24000): tensor([0, 0, 0,  ..., 0, 0, 0], device='cuda:0')
train_bs (2000): tensor([0, 0, 0,  ..., 0, 0, 0], device='cuda:0')
train_bt (12): tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')


EDGE MODEL FORWARD
src (torch.Size([24000])): tensor([   0,    0,    0,  ..., 1999, 1999, 1999], device='cuda:0')
tgt (torch.Size([24000])): tensor([0, 1, 2,  ..., 7, 8, 9], device='cuda:0')
x_s (torch.Size([2000, 10])): tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
x_t (torch.Size([12, 2])): tensor([[2.0000e+00, 6.8200e+04],
        [2.0000e+00, 6.9300e+04],
        [2.0000e+00, 9.6300e+04],
        [1.2000e+01, 1.4400e+04],
        [6.0000e+00, 2.2000e+04],
        [6.0000e+00, 8.3000e+03],
        [1.2000e+01, 1.4000e+04],
        [6.0000e+00, 2.2000e+04],
        [3.0000e+00, 7.4000e+03],
        [6.0000e+00, 4.5000e+03],
        [1.2000e+01, 2.8000e+03],
        [8.0000e+00, 9.7000e+03]], device='cuda:0')
edge_attr (torch.Size([24000, 10])): tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
u (torch.Size([1, 10])): tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], device='cuda:0')
Traceback (most recent call last):
  File "/home/jl5824/pfs-neural-net/train.py", line 217, in <module>
    time_pred, _ = gnn(graph, train_be[i_batch], train_bs[i_batch], train_bt[i_batch])
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/pfs-neural-net/gnn.py", line 406, in forward
    x_s, x_t, edge_attr, u = blk(x_s, x_t, edge_index, edge_attr,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/pfs-neural-net/gnn.py", line 341, in forward
    edge_attr = self.edge_model(x_s, x_t, edge_index, edge_attr, u, batch_e)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/pfs-neural-net/gnn.py", line 178, in forward
    return self.edge_mlp(h)
           ^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/container.py", line 240, in forward
    input = module(input)
            ^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/linear.py", line 125, in forward
    return F.linear(input, self.weight, self.bias)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
RuntimeError: mat1 and mat2 shapes cannot be multiplied (24000x32 and 35x10)

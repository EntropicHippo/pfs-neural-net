edge_attr (torch.Size([24000, 10])): tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]])
SLURM ID: 0
Start Pre-Training
No pre-trained checkpoint found.

TRAIN.PY
i_batch: 0
train_be (24000): tensor([0, 0, 0,  ..., 0, 0, 0], device='cuda:0')
train_bs (2000): tensor([0, 0, 0,  ..., 0, 0, 0], device='cuda:0')
train_bt (12): tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')


EDGE MODEL FORWARD
src (torch.Size([24000])): tensor([   0,    0,    0,  ..., 1999, 1999, 1999], device='cuda:0')
tgt (torch.Size([24000])): tensor([0, 1, 2,  ..., 7, 8, 9], device='cuda:0')
x_s (torch.Size([2000, 10])): tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
x_t (torch.Size([12, 5])): tensor([[0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0.]], device='cuda:0')
edge_attr (torch.Size([24000, 10])): tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
u (torch.Size([1, 10])): tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], device='cuda:0')
h (torch.Size([24000, 35]))
x_s[src] (torch.Size([24000, 10]))
x_t[tgt] (torch.Size([24000, 5]))
edge_attr (torch.Size([24000, 10]))
u[batch_e] torch.Size([24000, 10])

EDGE MODEL FORWARD
src (torch.Size([24000])): tensor([   0,    0,    0,  ..., 1999, 1999, 1999], device='cuda:0')
tgt (torch.Size([24000])): tensor([0, 1, 2,  ..., 7, 8, 9], device='cuda:0')
x_s (torch.Size([2000, 10])): tensor([[-7.0682e-06, -1.1780e-06,  2.8273e-05,  ...,  1.8849e-05,
          0.0000e+00, -5.8902e-06],
        [-7.0682e-06, -1.1780e-06,  2.8273e-05,  ...,  1.8849e-05,
          0.0000e+00, -5.8902e-06],
        [-7.0682e-06, -1.1780e-06,  2.8273e-05,  ...,  1.8849e-05,
          0.0000e+00, -5.8902e-06],
        ...,
        [-7.0682e-06, -1.1780e-06,  2.8273e-05,  ...,  1.8849e-05,
          0.0000e+00, -5.8902e-06],
        [-7.0682e-06, -1.1780e-06,  2.8273e-05,  ...,  1.8849e-05,
          0.0000e+00, -5.8902e-06],
        [-7.0682e-06, -1.1780e-06,  2.8273e-05,  ...,  1.8849e-05,
          0.0000e+00, -5.8902e-06]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
x_t (torch.Size([12, 5])): tensor([[ 0.0000e+00, -1.8849e-05,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00, -1.8849e-05,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00, -1.8849e-05,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00, -1.8849e-05,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00, -1.8849e-05,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00, -1.8849e-05,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00, -1.8849e-05,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00, -1.8849e-05,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00, -1.8849e-05,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00, -1.8849e-05,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00, -1.8849e-05,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00, -1.8849e-05,  0.0000e+00,  0.0000e+00,  0.0000e+00]],
       device='cuda:0', grad_fn=<NativeBatchNormBackward0>)
edge_attr (torch.Size([24000, 10])): tensor([[ 9.4243e-06, -5.8902e-07,  0.0000e+00,  ..., -1.1780e-06,
         -4.7122e-06, -1.4726e-07],
        [ 9.4243e-06, -5.8902e-07,  0.0000e+00,  ..., -1.1780e-06,
         -4.7122e-06, -1.4726e-07],
        [ 9.4243e-06, -5.8902e-07,  0.0000e+00,  ..., -1.1780e-06,
         -4.7122e-06, -1.4726e-07],
        ...,
        [ 9.4243e-06, -5.8902e-07,  0.0000e+00,  ..., -1.1780e-06,
         -4.7122e-06, -1.4726e-07],
        [ 9.4243e-06, -5.8902e-07,  0.0000e+00,  ..., -1.1780e-06,
         -4.7122e-06, -1.4726e-07],
        [ 9.4243e-06, -5.8902e-07,  0.0000e+00,  ..., -1.1780e-06,
         -4.7122e-06, -1.4726e-07]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
u (torch.Size([1, 10])): tensor([[ 3.8692,  0.4682, -1.5265, -1.1584,  0.5860,  0.9480,  0.4878,  0.2680,
         -2.9319,  0.0721]], device='cuda:0', grad_fn=<AddmmBackward0>)
h (torch.Size([24000, 35]))
x_s[src] (torch.Size([24000, 10]))
x_t[tgt] (torch.Size([24000, 5]))
edge_attr (torch.Size([24000, 10]))
u[batch_e] torch.Size([24000, 10])

EDGE MODEL FORWARD
src (torch.Size([24000])): tensor([   0,    0,    0,  ..., 1999, 1999, 1999], device='cuda:0')
tgt (torch.Size([24000])): tensor([0, 1, 2,  ..., 7, 8, 9], device='cuda:0')
x_s (torch.Size([2000, 10])): tensor([[ 9.4243e-05, -2.3561e-05,  0.0000e+00,  ...,  0.0000e+00,
          5.6546e-05,  0.0000e+00],
        [ 9.4243e-05, -2.3561e-05,  0.0000e+00,  ...,  0.0000e+00,
          5.6546e-05,  0.0000e+00],
        [ 9.4243e-05, -2.3561e-05,  0.0000e+00,  ...,  0.0000e+00,
          5.6546e-05,  0.0000e+00],
        ...,
        [ 9.4243e-05, -2.3561e-05,  0.0000e+00,  ...,  0.0000e+00,
          5.6546e-05,  0.0000e+00],
        [ 9.4243e-05, -2.3561e-05,  0.0000e+00,  ...,  0.0000e+00,
          5.6546e-05,  0.0000e+00],
        [ 9.4243e-05, -2.3561e-05,  0.0000e+00,  ...,  0.0000e+00,
          5.6546e-05,  0.0000e+00]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
x_t (torch.Size([12, 5])): tensor([[0.0003, 0.0000, 0.0006, 0.0006, 0.0006],
        [0.0003, 0.0000, 0.0006, 0.0006, 0.0006],
        [0.0003, 0.0000, 0.0006, 0.0006, 0.0006],
        [0.0003, 0.0000, 0.0006, 0.0006, 0.0006],
        [0.0003, 0.0000, 0.0006, 0.0006, 0.0006],
        [0.0003, 0.0000, 0.0006, 0.0006, 0.0006],
        [0.0003, 0.0000, 0.0006, 0.0006, 0.0006],
        [0.0003, 0.0000, 0.0006, 0.0006, 0.0006],
        [0.0003, 0.0000, 0.0006, 0.0006, 0.0006],
        [0.0003, 0.0000, 0.0006, 0.0006, 0.0006],
        [0.0003, 0.0000, 0.0006, 0.0006, 0.0006],
        [0.0003, 0.0000, 0.0006, 0.0006, 0.0006]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
edge_attr (torch.Size([24000, 10])): tensor([[ 4.7122e-06, -4.7122e-06,  0.0000e+00,  ...,  1.8849e-05,
          0.0000e+00, -7.3628e-08],
        [ 4.7122e-06, -4.7122e-06,  0.0000e+00,  ...,  1.8849e-05,
          0.0000e+00, -7.3628e-08],
        [ 4.7122e-06, -4.7122e-06,  0.0000e+00,  ...,  1.8849e-05,
          0.0000e+00, -7.3628e-08],
        ...,
        [ 4.7122e-06, -4.7122e-06,  0.0000e+00,  ...,  1.8849e-05,
          0.0000e+00, -7.3628e-08],
        [ 4.7122e-06, -4.7122e-06,  0.0000e+00,  ...,  1.8849e-05,
          0.0000e+00, -7.3628e-08],
        [ 4.7122e-06, -4.7122e-06,  0.0000e+00,  ...,  1.8849e-05,
          0.0000e+00, -7.3628e-08]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
u (torch.Size([1, 10])): tensor([[ 2.6655, -2.2698, -1.7762, -0.3975, -6.0516,  2.3228,  4.1341, -0.2491,
         -3.1263, -1.4136]], device='cuda:0', grad_fn=<AddmmBackward0>)
h (torch.Size([24000, 35]))
x_s[src] (torch.Size([24000, 10]))
x_t[tgt] (torch.Size([24000, 5]))
edge_attr (torch.Size([24000, 10]))
u[batch_e] torch.Size([24000, 10])

EDGE MODEL FORWARD
src (torch.Size([24000])): tensor([   0,    0,    0,  ..., 1999, 1999, 1999], device='cuda:0')
tgt (torch.Size([24000])): tensor([0, 1, 2,  ..., 7, 8, 9], device='cuda:0')
x_s (torch.Size([2000, 10])): tensor([[ 4.7122e-05,  9.4243e-05, -2.8273e-05,  ...,  1.1780e-05,
         -1.8849e-05,  2.9451e-06],
        [ 4.7122e-05,  9.4243e-05, -2.8273e-05,  ...,  1.1780e-05,
         -1.8849e-05,  2.9451e-06],
        [ 4.7122e-05,  9.4243e-05, -2.8273e-05,  ...,  1.1780e-05,
         -1.8849e-05,  2.9451e-06],
        ...,
        [ 4.7122e-05,  9.4243e-05, -2.8273e-05,  ...,  1.1780e-05,
         -1.8849e-05,  2.9451e-06],
        [ 4.7122e-05,  9.4243e-05, -2.8273e-05,  ...,  1.1780e-05,
         -1.8849e-05,  2.9451e-06],
        [ 4.7122e-05,  9.4243e-05, -2.8273e-05,  ...,  1.1780e-05,
         -1.8849e-05,  2.9451e-06]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
x_t (torch.Size([12, 5])): tensor([[0.0012, 0.0006, 0.0000, 0.0000, 0.0000],
        [0.0012, 0.0006, 0.0000, 0.0000, 0.0000],
        [0.0012, 0.0006, 0.0000, 0.0000, 0.0000],
        [0.0012, 0.0006, 0.0000, 0.0000, 0.0000],
        [0.0012, 0.0006, 0.0000, 0.0000, 0.0000],
        [0.0012, 0.0006, 0.0000, 0.0000, 0.0000],
        [0.0012, 0.0006, 0.0000, 0.0000, 0.0000],
        [0.0012, 0.0006, 0.0000, 0.0000, 0.0000],
        [0.0012, 0.0006, 0.0000, 0.0000, 0.0000],
        [0.0012, 0.0006, 0.0000, 0.0000, 0.0000],
        [0.0012, 0.0006, 0.0000, 0.0000, 0.0000],
        [0.0012, 0.0006, 0.0000, 0.0000, 0.0000]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
edge_attr (torch.Size([24000, 10])): tensor([[ 0.0000e+00, -4.7122e-06,  9.4243e-06,  ...,  0.0000e+00,
         -9.4243e-06,  1.8849e-05],
        [ 0.0000e+00, -4.7122e-06,  9.4243e-06,  ...,  0.0000e+00,
         -9.4243e-06,  1.8849e-05],
        [ 0.0000e+00, -4.7122e-06,  9.4243e-06,  ...,  0.0000e+00,
         -9.4243e-06,  1.8849e-05],
        ...,
        [ 0.0000e+00, -4.7122e-06,  9.4243e-06,  ...,  0.0000e+00,
         -9.4243e-06,  1.8849e-05],
        [ 0.0000e+00, -4.7122e-06,  9.4243e-06,  ...,  0.0000e+00,
         -9.4243e-06,  1.8849e-05],
        [ 0.0000e+00, -4.7122e-06,  9.4243e-06,  ...,  0.0000e+00,
         -9.4243e-06,  1.8849e-05]], device='cuda:0',
       grad_fn=<NativeBatchNormBackward0>)
u (torch.Size([1, 10])): tensor([[ 0.7867, -1.4306,  0.9967,  1.4084, -2.6310, -0.2454, -0.3726,  1.4012,
         -0.2142,  0.3786]], device='cuda:0', grad_fn=<AddmmBackward0>)
h (torch.Size([24000, 35]))
x_s[src] (torch.Size([24000, 10]))
x_t[tgt] (torch.Size([24000, 5]))
edge_attr (torch.Size([24000, 10]))
u[batch_e] torch.Size([24000, 10])
Batch 0: -U=-64773.4, G=0.0, N=0.0, +OT=35992.6, +UT=0.0

TRAIN.PY
i_batch: 1
train_be (24000): tensor([0, 0, 0,  ..., 0, 0, 0], device='cuda:0')
train_bs (2000): tensor([0, 0, 0,  ..., 0, 0, 0], device='cuda:0')
train_bt (12): tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')


EDGE MODEL FORWARD
src (torch.Size([24000])): tensor([   0,    0,    0,  ..., 1999, 1999, 1999], device='cuda:0')
tgt (torch.Size([24000])): tensor([0, 1, 2,  ..., 7, 8, 9], device='cuda:0')
x_s (torch.Size([2000, 10])): tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
x_t (torch.Size([12, 2])): tensor([[2.0000e+00, 6.8200e+04],
        [2.0000e+00, 6.9300e+04],
        [2.0000e+00, 9.6300e+04],
        [1.2000e+01, 1.4400e+04],
        [6.0000e+00, 2.2000e+04],
        [6.0000e+00, 8.3000e+03],
        [1.2000e+01, 1.4000e+04],
        [6.0000e+00, 2.2000e+04],
        [3.0000e+00, 7.4000e+03],
        [6.0000e+00, 4.5000e+03],
        [1.2000e+01, 2.8000e+03],
        [8.0000e+00, 9.7000e+03]], device='cuda:0')
edge_attr (torch.Size([24000, 10])): tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
u (torch.Size([1, 10])): tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], device='cuda:0')
h (torch.Size([24000, 32]))
x_s[src] (torch.Size([24000, 10]))
x_t[tgt] (torch.Size([24000, 2]))
edge_attr (torch.Size([24000, 10]))
u[batch_e] torch.Size([24000, 10])
Traceback (most recent call last):
  File "/home/jl5824/pfs-neural-net/train.py", line 217, in <module>
    time_pred, _ = gnn(graph, train_be[i_batch], train_bs[i_batch], train_bt[i_batch])
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/pfs-neural-net/gnn.py", line 411, in forward
    x_s, x_t, edge_attr, u = blk(x_s, x_t, edge_index, edge_attr,
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/pfs-neural-net/gnn.py", line 346, in forward
    edge_attr = self.edge_model(x_s, x_t, edge_index, edge_attr, u, batch_e)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/pfs-neural-net/gnn.py", line 183, in forward
    return self.edge_mlp(h)
           ^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/container.py", line 240, in forward
    input = module(input)
            ^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jl5824/.conda/envs/torch-gnn/lib/python3.12/site-packages/torch/nn/modules/linear.py", line 125, in forward
    return F.linear(input, self.weight, self.bias)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
RuntimeError: mat1 and mat2 shapes cannot be multiplied (24000x32 and 35x10)
